task:
  name: Manga Downloader
  container:
    image: ubuntu:latest
  env:
    PIXELDRAIN_API: ${PIXELDRAIN_API}  # Set your secret here
    TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}    # Set your secret here
    TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID} # Set your secret here

  steps:
    - install:
        packages:
          - python3-pip

    - script: |
        echo "start_time=$(date +%s)" >> $CIRRUS_ENV
        
    - script: |
        pip install mangadex-downloader

    - script: |
        if [[ -n "${CIRRUS_ENV_CUSTOM_URL}" ]]; then
          echo "use_custom_url=true" >> $CIRRUS_OUTPUT
          echo "custom_url=${CIRRUS_ENV_CUSTOM_URL}" >> $CIRRUS_OUTPUT
          echo "start_index=1" >> $CIRRUS_OUTPUT
          echo "end_index=1" >> $CIRRUS_OUTPUT
        elif [[ -n "${CIRRUS_ENV_SINGLE_INDEX}" ]]; then
          echo "is_range=false" >> $CIRRUS_OUTPUT
          echo "start_index=${CIRRUS_ENV_SINGLE_INDEX}" >> $CIRRUS_OUTPUT
          echo "end_index=${CIRRUS_ENV_SINGLE_INDEX}" >> $CIRRUS_OUTPUT
        elif [[ -n "${CIRRUS_ENV_INDEX_RANGE}" ]]; then
          echo "is_range=true" >> $CIRRUS_OUTPUT
          IFS='-' read -ra RANGE <<< "${CIRRUS_ENV_INDEX_RANGE}"
          echo "start_index=${RANGE[0]}" >> $CIRRUS_OUTPUT
          echo "end_index=${RANGE[1]}" >> $CIRRUS_OUTPUT
        else
          echo "is_range=false" >> $CIRRUS_OUTPUT
          echo "start_index=1" >> $CIRRUS_OUTPUT
          echo "end_index=1" >> $CIRRUS_OUTPUT
        fi

    - script: |
        process_url() {
            local url="$1"
            local index="$2"
            echo "Processing manga from URL: $url"
            mangadex-dl "$url" --no-group-name -d manga --progress-bar-layout=none -wti
            
            manga_folder=$(ls manga)
            if [ -z "$manga_folder" ]; then
              echo "Error: No manga folder found for $url"
              return 1
            fi
            
            sanitized_folder_name=$(echo "${manga_folder}" | tr -d ' ' | tr '[:upper:]' '[:lower:]')
            
            echo "Archiving folder '${manga_folder}' to '${sanitized_folder_name}.tar'"
            if ! tar -cf "${sanitized_folder_name}.tar" -C manga "${manga_folder}"; then
              echo "Error: Failed to create archive for $url"
              return 1
            fi
            
            size=$(du -h "${sanitized_folder_name}.tar" | cut -f1)
            
            echo "Uploading ${sanitized_folder_name}.tar to PixelDrain"
            ID=$(curl --progress-bar -T "${sanitized_folder_name}.tar" -u :${PIXELDRAIN_API} https://pixeldrain.com/api/file/ | grep -Po '(?<="id":")[^"]*')
            if [ -n "$ID" ]; then
              echo "${manga_folder}|${sanitized_folder_name}.tar|${index}|${size}|https://pixeldrain.com/u/${ID}|https://pd.cybar.xyz/${ID}" >> upload_info.txt
            else
              echo "Error: Failed to upload ${sanitized_folder_name}.tar to PixelDrain"
            fi
            
            rm -rf manga "${sanitized_folder_name}.tar"
        }

        if [[ "$use_custom_url" == "true" ]]; then
          process_url "$custom_url" "custom"
        else
          for ((i=start_index; i<=end_index; i++)); do
            url=$(sed -n "${i}p" manga.txt)
            if [[ -z "$url" ]]; then
              echo "No URL found at line ${i}. Stopping."
              break
            fi
            process_url "$url" "$i"
          done
        fi
        
        if [ ! -f upload_info.txt ]; then
          echo "workflow_complete=true" >> $CIRRUS_OUTPUT 
        fi

    - script: |
        end_time=$(date +%s)
        duration=$((end_time - $(cat $CIRRUS_ENV/start_time)))
        echo "workflow_duration=$duration" >> $CIRRUS_ENV
        
    # Send Telegram Notification step would go here, similar to above.
